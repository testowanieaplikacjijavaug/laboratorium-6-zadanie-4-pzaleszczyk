/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;


import static org.junit.Assert.*;

import java.util.HashMap;

import org.hamcrest.Description;
import org.hamcrest.TypeSafeDiagnosingMatcher;
import org.junit.Before;

//import static org.assertj.core.api.Assertions.*;
import static org.hamcrest.MatcherAssert.assertThat; 
import static org.hamcrest.Matchers.*;



public class FriendshipsTest {
	Friendships friends = new Friendships();
	
    @Before
    public void setup() {
        friends.friendships = new HashMap<>();
    }


    @Test
    public void TestExceptionPerson1null() {

        try {
        	friends.makeFriends(null, "Tomek");
    	}catch(Exception e){
    		assertThat(e,instanceOf(IllegalArgumentException.class));
    		return;
    	}
    	//Else fail
    	assertThat(true,is(false));
        
    }

    @Test
    public void TestExceptionPerson2null() {
    	try {
    		friends.makeFriends("Tomek", null);
    	}catch(Exception e){
    		assertThat(e,instanceOf(IllegalArgumentException.class));
    		return;
    	}
    	//Else fail
    	assertThat(true,is(false));

    }
    
   

    @Test
    public void TestExceptionPerson1empty() {
    	try {
    		friends.makeFriends("", "Tomek");
    	}catch(Exception e){
    		assertThat(e,instanceOf(IllegalArgumentException.class));
    		return;
    	}
    	//Else fail
    	assertThat(true,is(false));
    }

    @Test
    public void TestExceptionPerson2empty() {

        try {
        	 friends.makeFriends("Tomek", "");
    	}catch(Exception e){
    		assertThat(e,instanceOf(IllegalArgumentException.class));
    		return;
    	}
    	//Else fail
    	assertThat(true,is(false));
    }

    @Test
    public void TestMakeFriendsWithEmptyList() {
        friends.makeFriends("Tomek", "Atomek");
        
        assertThat(friends.friendships.get("Tomek").get(0), is(equalTo("Atomek")));
        
        
        assertThat(friends.friendships.get("Tomek").size(), is(equalTo(1)));
    }
    
    @Test
    public void TestAtomeksFriendIsTomek() {
        friends.makeFriends("Tomek", "Atomek");
        
        assertThat(friends.friendships.get("Atomek").get(0), CustomMatcher.isTomek());
        
  
    }

    @Test
    public void TestMakeFriendsAppendingList() {
    	
        friends.makeFriends("Tomek", "Atomek");
        friends.makeFriends("Tomek", "Tomasz");
        
        assertThat(friends.friendships.get("Tomek").get(0), is(equalTo("Atomek")));
        assertThat(friends.friendships.get("Tomek").get(1), is(equalTo("Tomasz")));
        assertThat(friends.friendships.get("Tomek").size(), is(equalTo(2)));
    }

    @Test
    public void TestCheckIfSecondPersonIsFriend() {
        friends.makeFriends("Tomek", "Atomek");
        assertThat(friends.friendships.get("Atomek").get(0),is(equalTo("Tomek")));
    }

    @Test
    public void ShouldRaiseAnExceptionWhenPerson1IsNullInAreFriends() {
 
        
        try {
        	friends.areFriends(null, "Tomek");
    	}catch(Exception e){
    		assertThat(e,instanceOf(IllegalArgumentException.class));
    		return;
    	}
    	//Else fail
    	assertThat(true,is(false));
    }

    @Test
    public void TestPerson2Null() {
    	
    	 try {
    		 friends.areFriends("Tomek", null);
     	}catch(Exception e){
     		assertThat(e,instanceOf(IllegalArgumentException.class));
     		return;
     	}
     	//Else fail
     	assertThat(true,is(false));

    }

    @Test
    public void TestPerson1Empty() {
    	 try {
    		 friends.areFriends("", "Tomek");
     	}catch(Exception e){
     		assertThat(e,instanceOf(IllegalArgumentException.class));
     		return;
     	}
     	//Else fail
     	assertThat(true,is(false));

    }

    @Test
    public void TestPerson2Empty() {
      	 try {
      		friends.areFriends("Tomek", "");
    	}catch(Exception e){
    		assertThat(e,instanceOf(IllegalArgumentException.class));
    		return;
    	}
    	//Else fail
    	assertThat(true,is(false));

    }


    @Test
    public void TestTrueFriends() {
        friends.makeFriends("Tomek", "Atomek");
        assertThat(friends.areFriends("Tomek", "Atomek"), is(true));
    }

    @Test
    public void TestFalseFriends () {
        friends.makeFriends("Tomek", "Atomek");
        assertThat(friends.areFriends("Tomek", "a"), is(false));
    }

    @Test
    public void Testgetfriendlistnull() {
    	 try {
       		friends.getFriendsList(null);
     	}catch(Exception e){
     		assertThat(e,instanceOf(IllegalArgumentException.class));
     		return;
     	}
     	//Else fail
     	assertThat(true,is(false));
    }


    @Test
    public void ShouldReturnFriendshipList() {
        friends.makeFriends("Tomek", "t");
        assertThat(friends.getFriendsList("Tomek"), hasSize((greaterThan(0))));
    }
    
    @Test
    public void ShouldHasNotUpperCase() {
    	 friends.makeFriends("tomek", "Atomek");
         assertThat(friends.friendships.get("Atomek").get(0), CaseMatcher.isLowerCase());

    }

}

class CustomMatcher extends TypeSafeDiagnosingMatcher<String> {

	
	public static CustomMatcher isTomek() {
		return new CustomMatcher();
	}

	@Override
	protected boolean matchesSafely(String item, Description mismatchDescription) {
		mismatchDescription.appendText(item);
		if(item == "Tomek")
			return true;
		return false;
	}

	@Override
	public void describeTo(Description description) {
		// TODO Auto-generated method stub
		description.appendText("Tomek");

	}

}

class CaseMatcher extends TypeSafeDiagnosingMatcher<String> {


	public static CaseMatcher isLowerCase() {
		return new CaseMatcher();
	}
	
	@Override
	public void describeTo(Description description) {
		// TODO Auto-generated method stub
		description.appendText("All lower case..");
		
	}

	@Override
	protected boolean matchesSafely(String item, Description mismatchDescription) {
		mismatchDescription.appendText(item);
		for(Character val : item.toCharArray()) {
			if(Character.isUpperCase(val))
				return false;
		}
		return true;
	}
	 
	
	}